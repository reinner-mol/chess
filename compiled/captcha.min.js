!function(){"use strict";const t={cache:"no-cache",credentials:"same-origin"},e={"X-Requested-With":"XMLHttpRequest"},s=(s,n={})=>fetch(s,Object.assign(Object.assign(Object.assign({},t),{headers:Object.assign({},e)}),n)),n=(t,e)=>t[(t=>`lichess-${t}`)(e)];lichess.load.then((()=>{setTimeout((()=>{$("div.captcha").each((function(){const t=$(this),e=t.find(".mini-board"),o=t.find("input").val(""),a=n(e[0],"chessground"),c=a.getFen(),i=e.data("moves"),r=new Map;for(const t in i)r.set(t,i[t].match(/.{2}/g));a.set({turnColor:a.state.orientation,movable:{free:!1,dests:r,color:a.state.orientation,events:{after(e,s){t.removeClass("success failure"),u(e+" "+s)}}}});const u=function(i){o.val(i),((t,e={})=>s(t,e).then((t=>{if(t.ok)return t.text();throw t.statusText})))(((t,e)=>{const s=new URLSearchParams;for(const t of Object.keys(e))void 0!==e[t]&&s.append(t,e[t]);const n=s.toString();return n?`${t}?${n}`:t})(t.data("check-url"),{solution:i})).then((s=>{t.toggleClass("success","1"==s).toggleClass("failure","1"!=s),"1"==s?n(e[0],"chessground").stop():setTimeout((()=>a.set({fen:c,turnColor:a.state.orientation,movable:{dests:r}})),300)}))}}))}),1e3)}))}();
