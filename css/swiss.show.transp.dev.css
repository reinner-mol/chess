/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
.chat__members {
  text-shadow: 0.5px 1px 1px #000;
}

/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout across pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
.slist thead, .mchat__tab, .mchat__messages a:not(.user-link), .swiss__main__header .ongoing .nb, .swiss__main__header .time, .swiss__standing td.rank, .swiss__standing .tieBreak, .swiss__player-info .stats td:last-child, .swiss__player-info .sublist th {
  font-family: 'Roboto', Sans-Serif;
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.chat__members {
  color: #f7f7f7;
}

.slist thead, .swiss__controls, .swiss__player-info .stats h2 {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
}

.fbt {
  background: none;
  border: none;
  outline: none;
  color: #cccccc;
}

.mchat__tab input {
  -webkit-appearance: none;
  background: #161512;
  border: 1px solid rgba(0, 0, 0, 0.5);
  display: inline-block;
  padding: 0.5em;
}

.mchat__tab input:checked {
  background: #3b5c16;
  border-color: #4f7a1d;
}

.context-streamer, .mchat__tab, .swiss__meta section .setup {
  white-space: nowrap;
  overflow: hidden;
}

.mchat__tab span, .swiss__standing .player .name, .swiss__player-info .pairings td:nth-child(2) {
  white-space: nowrap;
}

.mchat__messages, .swiss__meta .description {
  overflow-wrap: break-word;
  word-break: break-word;
}

.mchat__tab span, .swiss__standing .player .name, .swiss__player-info .pairings td:nth-child(2), .podium > div {
  overflow: hidden;
  text-overflow: ellipsis;
}

.swiss__controls .pager, .schedule-next-round, .swiss__standing .pairings div, .swiss__standing .pairings div > * {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.context-streamer, .chat__members__number, .swiss__meta section[data-icon], .swiss__board .mini-game__player, .swiss__main__header, .swiss__main__header .ongoing {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
}

.swiss__controls {
  /* extends %flex-center */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-between;
}

.mchat, .mchat__content, .swiss__side, .swiss__board, .swiss__main__header .clock-created, .swiss__ur-playing, .swiss__stats, .swiss__player-info .stats {
  display: flex;
  flex-flow: column;
}

.mchat__tab input, .mchat, .swiss__meta, .swiss__board, .swiss__player-info, .swiss__stats, .pagination a,
.pagination span, .swiss__side .tour__prize {
  border-radius: 3px;
}

.mchat, .swiss__meta, .swiss__board, .swiss__player-info {
  overflow: hidden;
  /* helps with clipping background into border-radius */
}

.mchat__tab {
  border-radius: 3px 3px 0 0;
}

.context-streamer {
  border-radius: 0 0 3px 3px;
}

.swiss__stats, .mchat, .swiss__meta, .swiss__board, .swiss__player-info, .context-streamer, .swiss__controls {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

.fbt {
  text-transform: uppercase;
  line-height: 1.5;
  transition: all 150ms;
}

@media (hover: hover) {
  .fbt:hover:not(.disabled):not([disabled]) {
    background: rgba(86, 134, 31, 0.9);
    color: #fff;
  }
}

.fbt.active {
  background: #629924 !important;
  color: #fff;
}

.fbt.disabled, .fbt[disabled] {
  opacity: 0.5;
  cursor: default;
}

@keyframes bar-glider-anim {
  0% {
    transform: translateX(-1300px);
  }
  100% {
    transform: translateX(2100px);
  }
}

.bar-glider {
  position: relative;
  overflow: hidden;
}

.bar-glider::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  width: 70px;
  background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.3));
  animation: bar-glider-anim 3s linear infinite;
}

.slist {
  width: 100%;
  border-bottom: 1px solid #404040;
}

.slist thead th {
  border-top: 1px solid #404040;
  border-bottom: 1px solid #404040;
  padding: 0.5rem 0.8rem;
}

.slist thead th.large {
  font-size: 1.2rem;
}

.slist td {
  padding: 1rem;
}

.slist td .label {
  font-family: monospace;
  font-size: 0.8rem;
}

.slist tbody tr:nth-child(even) {
  background: rgba(255, 255, 255, 0.05);
}

.slist td:first-child,
.slist th:first-child {
  padding-left: 1.5rem;
}

.slist-pad td:first-child,
.slist-pad th:first-child {
  padding-left: var(--box-padding);
}

.slist-pad td:last-child,
.slist-pad th:last-child {
  padding-right: var(--box-padding);
}

.slist-invert tbody tr:nth-child(odd) {
  background: rgba(255, 255, 255, 0.05);
}

.slist-invert tbody tr:nth-child(even) {
  background: none;
}

.pull-quote {
  margin: 0 auto;
}

.pull-quote p {
  color: #cccccc;
  position: relative;
  margin: 0 0.7em;
  padding: 1em 0;
  border: 1px solid #404040;
  border-width: 1px 0;
  font-style: italic;
  font-size: 1.1rem;
}

.pull-quote p:after {
  content: '';
  position: absolute;
  bottom: -9px;
  left: 42px;
  width: 15px;
  height: 15px;
  background: rgba(0, 0, 0, 0.6);
  border-left: 2px solid #404040;
  border-bottom: 1px solid #404040;
  transform: skew(45deg) rotate(-45deg);
}

.pull-quote.long p {
  font-size: 1rem;
}

.pull-quote footer {
  margin: 10px;
  line-height: 20px;
  text-align: right;
}

.pull-quote footer:before {
  content: '\2014\2009';
}

.color-icon.white::before {
  content: 'J';
}

.color-icon.black::before {
  content: 'K';
}

.color-icon.random::before {
  content: 'l';
}

.context-streamers {
  max-height: 20vh;
  overflow-y: auto;
}

.context-streamer {
  height: 2.2em;
  color: #fff !important;
  background: #44641d;
  transition: all 150ms;
}

.context-streamer::before {
  font-size: 1.3em;
  margin-left: 0.4em;
}

.context-streamer:hover {
  background: #537e20;
}

.now-playing {
  display: grid;
  --np-min-width: 200px;
  grid-template-columns: repeat(auto-fill, minmax(var(--np-min-width), 1fr));
}

@media (max-width: 499px) {
  .now-playing {
    --np-min-width: 50%;
  }
}

.now-playing > a {
  color: #cccccc;
  padding: 0.3em;
}

.now-playing .indicator {
  color: #d64f00;
  margin-top: -3px;
  display: block;
}

.now-playing cg-board {
  box-shadow: none;
}

.podium-wrap {
  position: relative;
  padding-bottom: 20px;
}

.podium-wrap #confetti {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  opacity: 1;
  transition: opacity 25s;
}

.podium-wrap #confetti.faded {
  opacity: 0;
}

.podium > div {
  display: inline-block;
  text-align: center;
}

.podium > div.engine {
  opacity: 0.5;
}

.podium > div.engine .user-link {
  text-decoration: line-through;
  font-weight: normal;
}

.podium > div.engine .trophy {
  opacity: 0.3;
  filter: grayscale(100%) contrast(10%);
}

.podium .first {
  width: 44%;
  font-size: 1.6em;
}

.podium .second {
  font-size: 1.3em;
  width: 29%;
}

.podium .third {
  font-size: 1.2em;
  width: 27%;
}

.podium .trophy {
  margin: 0 auto 0.5em auto;
  background: center / contain no-repeat;
}

.podium .first .trophy {
  height: 9em;
  width: 9em;
  background-image: url("../images/trophy/lichess-massive.svg");
}

.podium .second .trophy {
  height: 9em;
  width: 7em;
  background-image: url("../images/trophy/lichess-silver-1.svg");
}

.podium .third .trophy {
  height: 7em;
  width: 7em;
  background-image: url("../images/trophy/lichess-bronze-2.svg");
}

@media (max-width: 499px) {
  .podium .trophy {
    display: none;
  }
}

.podium .user-link {
  font-weight: bold;
  letter-spacing: -1px;
}

.podium .stats {
  margin: 0.5em auto 0 auto;
  font-size: 0.7em;
}

.podium .stats th {
  letter-spacing: -1px;
  text-align: left;
}

.podium .stats td {
  font-weight: bold;
  padding-left: 5px;
  text-align: right;
}

.podium .third .stats {
  font-size: 0.8em;
}

.pagination {
  color: #7a7a7a;
  display: flex;
}

.pagination a,
.pagination span {
  width: 2rem;
  height: 2rem;
  margin: 0 0.1rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.pagination span {
  color: #7a7a7a;
}

.pagination a:hover {
  background: rgba(11, 30, 48, 0.64);
}

.pagination .current {
  background: #3692e7;
  color: #fff;
}

body ::-webkit-scrollbar,
body ::-webkit-scrollbar-corner {
  width: 0.5rem;
  background: rgba(0, 0, 0, 0.6);
}

body ::-webkit-scrollbar-thumb {
  background: #4d4d4d;
}

body ::-webkit-scrollbar-thumb:hover,
body ::-webkit-scrollbar-thumb:active {
  background: #7a7a7a;
}

.mchat__tabs {
  flex: 0 0 auto;
  display: flex;
}

.mchat__tab {
  flex: 1 1 auto;
  text-align: center;
  padding: 0.4em 10px;
  cursor: pointer;
  color: #f7f7f7;
  transition: all 150ms;
}

.mchat__tab:hover {
  background: rgba(62, 23, 0, 0.66);
}

.mchat__tab-active {
  color: #cccccc;
  background: rgba(0, 0, 0, 0.6) !important;
}

.mchat__tab input {
  cursor: pointer;
  display: none;
}

.mchat__tab-active input {
  display: block;
}

.mchat__tab:last-child {
  border-right: none;
}

.mchat-optional .mchat__tab.discussion {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat__members {
  font-size: 0.9em;
  height: 100%;
  overflow: hidden;
}

.chat__members__inner {
  display: flex;
  align-items: flex-start;
}

.chat__members__number {
  margin-right: 1ch;
}

.chat__members__number::before {
  font-size: 1em;
  color: #b0b0b0;
  margin-right: 0.2ch;
}

.mchat__messages {
  flex: 1 1 auto;
  max-height: 50vh;
  overflow-y: auto;
  overflow-x: hidden;
  cursor: initial;
  font-size: 0.9em;
}

@media (min-width: 1260px) {
  .mchat__messages {
    max-height: none;
  }
}

.mchat__messages li {
  position: relative;
  padding: 0.5em 0 0.5em 10px;
  line-height: 1.2em;
  overflow-y: hidden;
  user-select: text;
}

.mchat__messages .deleted {
  opacity: 0.5;
}

.mchat__messages .system {
  display: block;
  opacity: 0.8;
  font-style: italic;
  font-size: 0.9em;
  margin-left: 0;
  text-align: center;
}

.mchat__messages .color,
.mchat__messages .user-link {
  font-weight: bold;
  padding: 0;
  color: #b0b0b0;
  letter-spacing: -1px;
  margin-right: 0.4em;
}

.mchat__messages .utitle {
  margin-right: 3px;
}

.mchat__messages i {
  display: none;
  position: absolute;
  top: 5px;
  right: 0;
  cursor: pointer;
  margin-right: 3px;
  padding: 4px 5px;
  opacity: 0.7;
  color: #d64f00;
}

.mchat__messages i:hover {
  opacity: 1;
}

.mchat__messages li:hover i {
  display: block;
  text-shadow: 0 0 2px rgba(0, 0, 0, 0.6), 0 0 5px rgba(0, 0, 0, 0.6), 0 0 10px rgba(0, 0, 0, 0.6);
}

.mchat__say {
  flex: 0 0 auto;
  border: 0;
  border-top: 1px solid #404040;
  border-radius: 0;
  padding: 3px 20px 3px 4px;
}

.mchat__say.whisper {
  color: #629924;
  font-weight: bold;
  font-style: italic;
}

@keyframes palantir-glowing {
  40% {
    background: none;
  }
  50% {
    background: rgba(49, 76, 18, 0.72);
  }
  60% {
    background: rgba(27, 73, 116, 0.72);
  }
  70% {
    background: none;
  }
}

.palantir {
  flex: 0 1 auto;
  animation: palantir-glowing 1.5s ease-in-out infinite;
  border-radius: 0 3px 0 0;
}

.palantir-slot {
  animation: none;
  opacity: 0.6;
}

.palantir-slot:hover {
  opacity: 1;
}

.palantir-off {
  animation: none;
}

.palantir-on {
  background: #629924;
  color: #fff;
  animation: none;
}

.palantir-on:hover {
  background: #cc3333 !important;
  color: #fff !important;
}

.palantir::after {
  top: 1px;
  left: 0;
  right: auto;
  background: none;
  box-shadow: none;
}

.mchat {
  grid-area: chat;
  justify-content: stretch;
  min-height: 15em;
}

.mchat__content {
  background: rgba(0, 0, 0, 0.6);
  flex: 1 1 auto;
  overflow: hidden;
}

.mchat__content.note textarea {
  font-size: 0.9em;
  flex-grow: 1;
  border: none;
  background-color: transparent;
  line-height: 1.7em;
  outline: none;
  resize: none;
}

@media (min-width: 800px) {
  #main-wrap {
    --main-max-width: auto;
  }
}

.swiss {
  display: grid;
  grid-template-areas: 'main' 'side' 'uchat' 'table';
  grid-gap: 2vmin;
}

.swiss__side {
  grid-area: side;
}

.swiss__table {
  grid-area: table;
}

.swiss__main {
  grid-area: main;
}

.swiss .chat__members {
  grid-area: uchat;
}

.swiss .swiss__board__top {
  display: none;
}

@media (min-width: 800px) {
  .swiss {
    grid-template-columns: minmax(500px, calc( 100vh * 0.9 - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) minmax(240px, 400px);
    grid-template-rows: calc(100vh - calc(var(--site-header-height) + var(--site-header-margin)) - 2vmin - 3rem) min-content;
    grid-template-areas: 'main  side' 'main  uchat' 'table table';
  }
  .swiss .mchat__messages {
    max-height: inherit;
  }
}

@media (min-width: 1260px) {
  .swiss {
    grid-template-columns: minmax(230px, 20vw) minmax(500px, calc( 100vh * 0.9 - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) minmax(240px, 400px);
    grid-template-rows: calc(100vh - calc(var(--site-header-height) + var(--site-header-margin)) - 2vmin - 3rem) auto;
    grid-template-areas: 'side  main table' 'uchat main table';
  }
  .swiss .swiss__board__top {
    display: block;
  }
}

.swiss__side .mchat {
  flex: 1 1 7em;
  margin-top: 2vmin;
}

@media (min-width: 800px) {
  .swiss__side .mchat {
    min-height: inherit;
  }
}

.swiss__side .tour__prize {
  padding: 1em;
  background: rgba(42, 11, 11, 0.64);
  border: 1px solid #cc3333;
  margin-bottom: 1em;
  font-size: 0.9em;
}

.swiss__meta {
  background: rgba(0, 0, 0, 0.6);
  padding: 1.2vmin 2vmin;
}

.swiss__meta section {
  margin-bottom: 2vmin;
}

.swiss__meta section::before {
  font-size: 3rem;
  margin-right: 4%;
}

.swiss__meta section p {
  margin: 0;
}

.swiss__meta section time {
  opacity: 1;
}

.swiss__meta section.conditions::before {
  opacity: 0.7;
}

.swiss__meta section.conditions.accepted,
.swiss__meta section.conditions .accepted {
  color: #629924;
}

.swiss__meta section.conditions.refused,
.swiss__meta section.conditions .refused {
  color: #cc3333;
}

.swiss__meta section.conditions .condition:first-child.accepted::after,
.swiss__meta section.conditions .condition + .condition.accepted::after {
  content: '\a0\2713';
}

.swiss__meta section.conditions .condition:first-child.refused::after,
.swiss__meta section.conditions .condition + .condition.refused::after {
  content: '\a0\2718';
}

.swiss__meta .description {
  max-height: 20vh;
  overflow-y: auto;
}

.chat__members {
  overflow: visible;
  /* fixes invisible spectators on firefox, col2 */
}

@media (max-width: 799px) and (orientation: portrait) {
  .chat__members {
    margin: 0 2vmin;
  }
}

.swiss__boards {
  margin: 2vmin 0;
  grid-gap: 1ch;
  --np-min-width: 200px;
}

.swiss__board .mini-game__player {
  padding: 0.2em;
}

.swiss__board .mini-game__user {
  display: flex;
}

.swiss__board .mini-game__user strong {
  text-align: center;
  margin-right: 1ch;
}

.swiss__main__header {
  position: relative;
  min-height: 7em;
  padding: 0 3vmin;
}

.swiss__main__header h1 {
  font-size: 2.2rem;
  flex: 9 1 auto;
  margin: 0;
  overflow: hidden;
}

.swiss__main__header h1 a {
  /* GM wikipedia */
  color: #98b8d6;
}

.swiss__main__header h1 a:hover {
  color: #3692e7;
}

.swiss__main__header img {
  flex: 0 0 60px;
  display: block;
  width: 60px;
  height: 60px;
  padding: 6px;
}

.swiss__main__header .img {
  margin-right: 1rem;
}

.swiss__main__header i::before {
  font-size: 2.2rem;
}

.swiss__main__header .clock {
  flex: 0 0 auto;
  font-weight: bold;
  color: #b0b0b0;
}

.swiss__main__header .clock-created {
  text-align: right;
}

.swiss__main__header .ongoing {
  flex: 0 0 auto;
  font-weight: bold;
  color: #b0b0b0;
}

.swiss__main__header .ongoing .shy {
  white-space: normal;
}

.swiss__main__header .ongoing .nb {
  color: #bf811d;
  flex: 1 1 100%;
  text-align: right;
  font-size: 2.8em;
  margin-right: 0.5em;
}

.swiss__main-finished .swiss__main__header h1 {
  text-align: center;
}

.swiss__main__header .time {
  color: #bf811d;
  font-size: 1.7em;
  margin-left: 0.2em;
}

.swiss__main__header .shy {
  line-height: 20px;
  font-size: 0.9em;
  font-weight: bold;
  text-transform: uppercase;
  opacity: 0.6;
  white-space: nowrap;
}

.swiss__notice {
  color: #fff;
  background: #629924;
  text-align: center;
  padding: 0.5em 0;
  opacity: 0.8;
}

.swiss__notice.closed {
  background: #3692e7;
}

.swiss__ur-playing {
  text-align: center;
  font-size: 1.5em;
  position: relative;
}

.swiss__ur-playing::before, .swiss__ur-playing::after {
  content: 'U';
  font-size: 2rem;
  position: absolute;
  top: 30px;
}

.swiss__ur-playing::before {
  left: 30px;
}

.swiss__ur-playing::after {
  right: 30px;
}

.swiss__controls {
  padding: 0 0px;
  position: relative;
}

.swiss__controls .fbt {
  padding: 0.6em 0.8em;
  text-transform: uppercase;
  line-height: 1.3;
}

@media (min-width: 500px) {
  .swiss__controls .fbt {
    padding: 0.6em 1em;
  }
}

.swiss__controls .highlight {
  position: absolute;
  right: 5px;
  top: -3px;
  padding: 8px 20px;
  border-radius: 8px;
  color: #fff;
  text-decoration: none;
  background: #82bf56;
  border-bottom: 5px solid #759900;
  text-shadow: 0 -1px #759900;
  transition: all 0.1s;
  transform: translate(0px, 0px);
}

.swiss__controls .highlight:hover {
  filter: brightness(1.06);
}

.swiss__controls .highlight:active {
  transform: translate(0px, 5px);
  border-bottom-width: 1px;
  text-shadow: 0 0 #759900;
  filter: brightness(1);
}

.swiss__controls .spinner {
  margin: 0;
  width: 1.5em;
  height: 1.5em;
  margin-right: 0.7em;
}

.swiss__controls .pager {
  user-select: none;
}

.swiss__controls .pager .page {
  margin: 0 3px;
  white-space: nowrap;
}

.swiss__controls .pager input {
  border: none;
  background: rgba(98, 153, 36, 0.2);
}

.swiss__controls .pager .search,
.swiss__controls .pager input {
  height: 100%;
}

.schedule-next-round {
  padding: 1em 0;
}

.schedule-next-round.required {
  background: #d64f00;
}

.schedule-next-round input {
  margin: auto;
}

.swiss__standing {
  border: none;
}

.swiss__standing .player {
  padding-left: 0px;
  padding-right: 0px;
}

.swiss__standing .player .name {
  display: inline-block;
  vertical-align: middle;
  padding-right: 5px;
  max-width: 140px;
}

.swiss__standing .user-link.long {
  letter-spacing: -0.7px;
}

.swiss__standing .user-link .rating {
  font-style: italic;
  font-size: 0.8em;
}

.swiss__standing tr {
  transition: all 150ms;
  user-select: none;
}

.swiss__standing .loading tbody {
  opacity: 0.6;
  transition: opacity 0.3s;
}

.swiss__standing:not(.created):not(.loading) tbody tr:hover {
  background: rgba(16, 43, 68, 0.66);
  cursor: pointer;
}

.swiss__standing tr.me td:first-child {
  background: linear-gradient(to right, rgba(83, 129, 30, 0.88) 0px, rgba(83, 129, 30, 0.88) 5px, rgba(0, 0, 0, 0) 5px, rgba(0, 0, 0, 0) 100%);
}

.swiss__standing tr.active td:last-child {
  background: linear-gradient(to left, rgba(46, 123, 196, 0.88) 0px, rgba(46, 123, 196, 0.88) 5px, rgba(0, 0, 0, 0) 5px, rgba(0, 0, 0, 0) 100%);
}

.swiss__standing td.rank {
  padding: 1em 0.5em 1em 10px;
  width: 1px;
  /* helps keeping it as small as possible */
}

.swiss__standing td.rank i {
  opacity: 0.4;
  font-size: 0.8em;
}

.swiss__standing .pairings {
  padding: 0;
  font-weight: bold;
  width: 100%;
}

.swiss__standing .pairings div {
  justify-content: flex-end;
  align-items: stretch;
  min-height: 3.5em;
}

.swiss__standing .pairings div > * {
  justify-content: center;
  flex: 0 0 2em;
  text-align: center;
}

.swiss__standing .pairings .ongoing {
  color: #3692e7;
}

.swiss__standing .pairings .ongoing:hover {
  background: rgba(30, 81, 129, 0.74);
}

.swiss__standing .pairings .win {
  color: #629924;
}

.swiss__standing .pairings .win:hover {
  background: rgba(55, 85, 20, 0.74);
}

.swiss__standing .pairings .loss {
  color: rgba(159, 40, 40, 0.84);
}

.swiss__standing .pairings .loss:hover {
  background: rgba(75, 19, 19, 0.68);
}

.swiss__standing .pairings .draw {
  color: rgba(161, 109, 24, 0.88);
}

.swiss__standing .pairings bye {
  color: #b0b0b0;
}

.swiss__standing .pairings late {
  color: #b0b0b0;
}

.swiss__standing .pairings absent {
  color: rgba(159, 40, 40, 0.84);
}

.swiss__standing .pairings r {
  border-left: 1px dotted #404040;
}

.swiss__standing .points {
  text-align: right;
  font-weight: bold;
}

.swiss__standing .tieBreak {
  text-align: right;
  padding-right: 2vmin;
}

.swiss__standing.long .user-link .rating {
  display: block;
  padding-left: 0px;
}

.swiss__standing.long .pairings div > * {
  flex: 0 0 1.5em;
}

.swiss__standing.xlong .swiss__standing .pairings div > * {
  flex: 0 0 1.3em;
}

.swiss__stats {
  background: rgba(0, 0, 0, 0.6);
  padding: 1.7em 0;
  align-self: flex-start;
}

.swiss__stats h2 {
  font-size: 1.5em;
  margin-bottom: 2rem;
  text-align: center;
}

.swiss__stats table {
  margin: auto;
}

.swiss__stats td {
  font-weight: bold;
  padding-left: 1em;
  text-align: right;
  line-height: 2em;
}

.swiss__stats__links {
  margin: 2em auto 0 auto;
}

.swiss__stats__links a {
  display: block;
  margin: 0.5em 0;
}

.swiss__player-info {
  background: rgba(0, 0, 0, 0.6);
  position: relative;
  align-self: flex-start;
}

.swiss__player-info .spinner {
  margin: 5em auto;
}

.swiss__player-info .close {
  position: absolute;
  top: 4px;
  right: 5px;
  opacity: 0.6;
  transition: all 150ms;
  color: #cc3333;
}

.swiss__player-info .close:hover {
  opacity: 1;
}

.swiss__player-info .stats {
  justify-content: center;
}

.swiss__player-info .stats h2 {
  font-size: 1.4em;
  padding: 0.6rem 1rem;
  border-bottom: 1px solid #404040;
}

.swiss__player-info .stats table {
  margin: 1em auto;
}

.swiss__player-info .stats td {
  font-weight: bold;
  padding-left: 10px;
  text-align: right;
  line-height: 1.8em;
}

.swiss__player-info .sublist {
  width: 100%;
}

.swiss__player-info .sublist tr {
  cursor: pointer;
  transition: background-color 150ms;
}

.swiss__player-info .sublist tr:nth-child(odd) {
  background: rgba(255, 255, 255, 0.05);
}

.swiss__player-info .sublist tr:hover {
  background: rgba(11, 30, 48, 0.64);
}

.swiss__player-info .sublist th,
.swiss__player-info .sublist td {
  padding: 0.3em;
}

.swiss__player-info .sublist th {
  padding-left: 7px;
}

.swiss__player-info .pairings {
  width: 100%;
}

.swiss__player-info .pairings tr {
  cursor: pointer;
  transition: background-color 150ms;
}

.swiss__player-info .pairings tr:nth-child(odd) {
  background: rgba(255, 255, 255, 0.05);
}

.swiss__player-info .pairings tr:hover {
  background: rgba(11, 30, 48, 0.64);
}

.swiss__player-info .pairings th,
.swiss__player-info .pairings td {
  padding: 0.3em;
}

.swiss__player-info .pairings th {
  border-left: 3px solid transparent;
  transition: all 150ms;
}

.swiss__player-info .pairings tr:hover th {
  border-color: #7a7a7a;
}

.swiss__player-info .pairings tr.win:hover th {
  border-color: #629924;
}

.swiss__player-info .pairings tr.loss:hover th {
  border-color: #cc3333;
}

.swiss__player-info .pairings td:nth-child(2) {
  max-width: 200px;
}

.swiss__player-info .pairings td:last-child {
  font-weight: bold;
  opacity: 0.8;
}

.swiss__player-info .pairings tr.win td:last-child {
  color: #629924;
  opacity: 1;
}

.swiss__player-info .pairings tr.loss td:last-child {
  color: #cc3333;
  opacity: 1;
}

.swiss__player-info .pairings .outcome {
  font-style: italic;
  color: #7a7a7a;
  text-align: center;
  text-transform: capitalize;
}

.swiss__player-info .color-icon {
  opacity: 0.6;
}

.pagination {
  margin-left: var(--box-padding);
}

.pagination--top {
  padding-bottom: 1em;
  border-bottom: 1px solid #404040;
}

.pagination--bottom {
  padding: 1em 0;
}

.swiss .pull-quote {
  margin-top: 30px;
  width: 300px;
}

.swiss__main-created {
  padding-bottom: 2em;
  /* as quote margin */
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
