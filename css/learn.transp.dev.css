/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
.learn-stages .what_next > p {
  text-shadow: 0.5px 1px 1px #000;
}

/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout across pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
.learn-stages .categ > h2, .learn__side-map .stage {
  font-family: 'Roboto', Sans-Serif;
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.learn__main #promotion-choice .explanation, .learn__screen {
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
}

.learn__screen-overlay {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.6);
  z-index: 109;
}

#promotion-choice {
  position: absolute;
  width: 100%;
  height: 100%;
}

.learn__table .goal, .learn__table .result, .learn__table .progress a, .learn__side-map .stage {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.learn-stages .stage, .learn__table .progress {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
}

.learn__table .wrap, .learn__side-home, .learn-stages .stage, .learn__screen, .learn__screen .buttons a {
  border-radius: 3px;
}

.learn__table .wrap {
  overflow: hidden;
  /* helps with clipping background into border-radius */
}

.learn__table .wrap, .learn__side-home {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

coords {
  /* handle hidden coords */
  /* handle inner coords */
  position: absolute;
  display: flex;
  pointer-events: none;
  user-select: none;
  color: #fff;
  text-shadow: 0 1px 2px #000;
  font-weight: bold;
  /* negate inner coords colors */
}

.coords-no coords {
  display: none;
}

coords {
  font-size: 8px;
}

@media (min-width: 320px) {
  coords {
    font-size: calc( 8px + 4 * ((100vw - 320px) / 880));
  }
}

@media (min-width: 1200px) {
  coords {
    font-size: 12px;
  }
}

coords.ranks {
  flex-flow: column-reverse;
  top: 1px;
  right: 0;
  height: 100%;
  width: 0.8em;
}

coords.ranks.black {
  flex-flow: column;
}

coords.files {
  bottom: 0px;
  left: 0;
  text-align: left;
  flex-flow: row;
  width: 100%;
  height: 1.4em;
}

coords.files.black {
  flex-flow: row-reverse;
}

coords.files coord {
  padding-left: 4px;
}

coords coord {
  flex: 1 1 auto;
}

coords .is3d .cg-wrap coords coord {
  color: #fff !important;
  text-shadow: 0 1px 2px #000 !important;
}

coords .is3d .cg-wrap coords.files {
  bottom: calc(1px - 2.5%);
}

coords .is3d .cg-wrap coords.files coord {
  padding-left: 3px;
}

:root {
  --cg-coord-color-white: #fff;
  --cg-coord-color-black: #fff;
  --cg-coord-shadow: 0 1px 2px #000;
}

coords {
  text-shadow: var(--cg-coord-shadow);
}

.orientation-white .files coord:nth-child(2n + 1),
.orientation-white .ranks coord:nth-child(2n),
.orientation-black .files coord:nth-child(2n),
.orientation-black .ranks coord:nth-child(2n + 1) {
  color: var(--cg-coord-color-white);
}

.orientation-white .files coord:nth-child(2n),
.orientation-white .ranks coord:nth-child(2n + 1),
.orientation-black .files coord:nth-child(2n + 1),
.orientation-black .ranks coord:nth-child(2n) {
  color: var(--cg-coord-color-black);
}

/* handle outer coords */
@media (min-width: 800px), (orientation: landscape) {
  .coords-out coords {
    text-shadow: none;
  }
  .coords-out coords.ranks {
    right: -15px;
    top: 0;
    width: 12px;
  }
  .coords-out coords.ranks coord {
    transform: translateY(42%);
  }
  .coords-out coords.files {
    bottom: -15px;
    left: 0;
    text-align: center;
  }
  .coords-out coords coord {
    color: #f7f7f7 !important;
  }
}

body {
  --board-scale: 1;
}

@media (min-width: 800px) and (min-height: 500px) {
  body {
    --board-scale: calc((var(--zoom) / 100) * 0.7 + 0.3);
  }
}

@media (max-width: 799px) and (orientation: portrait) {
  body {
    --col1: 1;
  }
  .main-board cg-board {
    border-radius: 0;
  }
}

#promotion-choice {
  background: rgba(22, 21, 18, 0.7);
  z-index: 205;
}

#promotion-choice square {
  cursor: pointer;
  border-radius: 50%;
  background-color: #b0b0b0;
  box-shadow: inset 0 0 25px 3px #808080;
  transition: all 150ms;
}

#promotion-choice piece {
  pointer-events: auto;
  opacity: 1;
  /* cancels blindfold */
}

.is2d #promotion-choice piece {
  width: 100%;
  height: 100%;
  transition: all 150ms;
  transform: scale(0.8);
}

#promotion-choice square:hover {
  box-shadow: inset 0 0 48px 8px #d64f00;
  border-radius: 0%;
}

.is2d #promotion-choice square:hover piece {
  transform: none;
}

#main-wrap {
  --main-max-width: calc(100vh - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem);
}

@media (min-width: 800px), (orientation: landscape) {
  #main-wrap {
    --main-max-width: auto;
  }
}

.learn {
  grid-area: main;
  display: grid;
  grid-gap: 2vmin;
}

.learn__side {
  grid-area: side;
}

.learn__main {
  grid-area: main;
}

.learn__table {
  grid-area: table;
}

.learn--run {
  padding: 15px;
  grid-template-areas: 'main' 'table' 'side';
}

.learn--map {
  padding: 15px;
  grid-template-areas: 'side' 'main';
}

@media (min-width: 800px), (orientation: landscape) {
  .learn--run {
    grid-template-columns: minmax(calc(70vmin * var(--board-scale)), calc(100vh * var(--board-scale) - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) minmax(240px, 400px);
    grid-template-rows: fit-content(0);
    grid-template-areas: 'main table' 'side .';
  }
  .learn--map {
    grid-template-areas: 'side main';
    grid-template-columns: 240px 560px;
  }
}

@media (min-width: 800px) and (min-width: 1260px), (orientation: landscape) and (min-width: 1260px) {
  .learn--map {
    grid-template-columns: 240px 960px;
  }
}

@media (min-width: 1260px) {
  .learn--run {
    grid-template-columns: minmax(230px, 20vw) minmax(calc(70vmin * var(--board-scale)), calc(100vh * var(--board-scale) - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) minmax(240px, 400px);
    grid-template-areas: 'side main table';
  }
}

.learn-stages {
  padding-top: 10px;
}

.learn-stages .categ > h2 {
  font-size: 2em;
  letter-spacing: 8px;
  text-transform: uppercase;
  color: #999;
  text-shadow: 0.5px 1px 1px #000;
  text-align: center;
}

.learn-stages .categ_stages {
  --min-width: 80vw;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(var(--min-width), 1fr));
  grid-gap: 1em;
  margin: 0.8em 0 3em 0;
}

@media (min-width: 500px) {
  .learn-stages .categ_stages {
    --min-width: 400px;
  }
}

.learn-stages .stage {
  transition: all 150ms;
  position: relative;
  height: 90px;
  color: #fff;
  margin-top: 13px;
  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.2);
  font-size: 1.2em;
}

.learn-stages .stage img {
  width: 80px;
  height: 80px;
  margin: 0 13px;
  opacity: 0.9;
}

.learn-stages .stage h3 {
  font-size: 2em;
  letter-spacing: 3px;
  margin: 0 0 1px -1px;
}

.learn-stages .stage h3 {
  font-size: 1.6em;
  letter-spacing: 2px;
}

.learn-stages .stage.vvv h3 {
  font-size: 1.4em;
  letter-spacing: 1px;
}

.learn-stages .stage p {
  margin: 0;
}

@keyframes soft-bright {
  50% {
    filter: brightness(0.97);
  }
}

.learn-stages .stage.ongoing {
  background: #3692e7;
  filter: brightness(0.9);
  animation: 1.7s soft-bright ease-in-out infinite;
}

.learn-stages .stage.ongoing:hover {
  filter: brightness(1.2);
}

.learn-stages .stage.done {
  background: #629924;
}

.learn-stages .stage.future {
  opacity: 0.7;
  background: #d64f00;
}

.learn-stages .stage.future img {
  opacity: 0.7;
}

.learn-stages .stage.active, .learn-stages .stage:hover {
  filter: brightness(1.08);
  transform: scale(1.02);
  opacity: 1;
}

.learn-stages .stage .ribbon-wrapper {
  display: block;
  width: 85px;
  height: 88px;
  overflow: hidden;
  position: absolute;
  top: -3px;
  right: -3px;
}

.learn-stages .ribbon {
  display: block;
  font-size: 15px;
  font-weight: bold;
  color: #333;
  text-align: center;
  text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px;
  transform: rotate(45deg);
  position: relative;
  padding: 7px 0;
  left: -5px;
  top: 15px;
  width: 120px;
  color: #6a6340;
  box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.3);
}

.learn-stages .ribbon i {
  color: #bf811d;
  animation: 0.6s soft-hue ease-in-out infinite;
  text-shadow: 0 -0.5px 1px rgba(0, 0, 0, 0.5);
}

.learn-stages .ribbon i:nth-child(2) {
  animation-delay: 0.2s;
}

.learn-stages .ribbon i:nth-child(3) {
  animation-delay: 0.4s;
}

.learn-stages .ribbon:before, .learn-stages .ribbon:after {
  content: '';
  border-left: 3px solid transparent;
  border-right: 3px solid transparent;
  position: absolute;
  bottom: -3px;
}

.learn-stages .ribbon:before {
  left: 0;
}

.learn-stages .ribbon:after {
  right: 0;
}

.learn-stages .ribbon.done {
  background-color: #bfdc7a;
}

.learn-stages .ribbon.done:before, .learn-stages .ribbon.done:after {
  border-top: 3px solid #6e8900;
}

.learn-stages .ribbon.ongoing {
  background-color: #b3e5fc;
}

.learn-stages .ribbon.ongoing:before, .learn-stages .ribbon.ongoing:after {
  border-top: 3px solid #536dfe;
}

.learn-stages .what_next > p {
  width: 100%;
  text-align: center;
  margin: 20px 0;
  font-size: 1.2em;
}

.learn__table {
  align-self: center;
}

.learn__table .title {
  display: flex;
  background: #3692e7;
  color: #fff;
}

.learn__table .title h2,
.learn__table .title h3 {
  font-size: 2.3em;
  margin: 15px 0 5px -3px;
  white-space: nowrap;
}

.learn__table .title img {
  width: 80px;
  height: 80px;
  margin: 5px 8px 5px 5px;
}

.learn__table .subtitle {
  margin-bottom: 1em;
}

.learn__table .goal {
  background: rgba(0, 0, 0, 0.6);
  border: 1px solid #404040;
  border-top: none;
  padding: 2vmin;
  text-align: center;
  justify-content: center;
}

.learn__table .result {
  justify-content: center;
  flex-flow: column nowrap;
  border: 1px solid #404040;
  border-top: none;
  text-align: center;
  cursor: pointer;
  transition: all 150ms;
  min-height: 135px;
  padding: 0;
  font-size: 1.7em;
}

@keyframes shadow-glow {
  50% {
    box-shadow: 0 0 10px 10px rgba(255, 255, 255, 0.5);
    transform: scale(1.05);
  }
}

@keyframes text-shadow-glow {
  50% {
    text-shadow: 0 0 10px #fff;
    transform: scale(1.05);
  }
}

.learn__table .result h2 {
  animation: text-shadow-glow 1s 1;
}

.learn__table .result.failed h2,
.learn__table .result.next h2 {
  margin-top: 15px;
}

.learn__table .result:hover {
  filter: brightness(1.1);
}

.learn__table .result .stars {
  margin-top: 4px;
}

.learn__table .result .stars i {
  margin: 3px;
  animation: text-shadow-glow 1s 1;
}

.learn__table .result button {
  margin: 15px auto 15px auto;
  font-size: 30px;
  font-weight: bold;
  text-transform: uppercase;
  background: #fff;
  border: none;
  border-radius: 5px;
  padding: 5px 10px;
  box-shadow: 0 0 5px 5px rgba(255, 255, 255, 0.5);
  animation: shadow-glow 1s infinite;
}

.learn__table .result.completed {
  background: #629924;
  color: #fff;
}

.learn__table .result.completed button {
  color: #629924;
}

.learn__table .result.failed {
  background: #cc3333;
  color: #fff;
}

.learn__table .result.failed button {
  color: #cc3333;
}

@keyframes go-home {
  from {
    opacity: 1;
  }
  to {
    opacity: 0.1;
  }
}

.learn__table .result.completed:not(.no-go-home) piece {
  animation: 0.7s ease-in-out 0.7s go-home;
}

.learn__table .progress {
  text-align: center;
  border: 1px solid #404040;
  border-top: 0;
}

.learn__table .progress a {
  align-content: center;
  flex: 1 1 100%;
  text-align: center;
  background: rgba(0, 0, 0, 0.6);
  height: 3em;
  font-size: 0.9em;
  border-left: 1px solid #404040;
  opacity: 0.8;
  transition: all 150ms;
}

.learn__table .progress a:first-child {
  border-left: 0;
}

.learn__table .progress a:hover {
  opacity: 1;
}

.learn__table .progress a span {
  margin: auto;
}

.learn__table .progress .st3 i:first-child {
  display: block;
}

.learn__table .progress a.done {
  color: #fff;
  background: #629924;
}

.learn__table .progress a.active {
  opacity: 1;
  color: #fff;
  background: #3692e7;
}

.learn__main item {
  width: 70%;
  height: 70%;
  bottom: 15%;
  left: 15%;
  background-size: cover;
  position: absolute;
  transform: translate3d(0, 0, 0);
  z-index: 1;
  transition: all 1s;
}

@keyframes soft-hue {
  50% {
    filter: hue-rotate(-20deg);
  }
}

@keyframes soft-grow {
  50% {
    transform: scale(1.08);
  }
}

@keyframes apple-appear {
  0% {
    opacity: 0.5;
    transform: scale(0) rotate(-360deg);
  }
  100% {
    opacity: 1;
    transform: scale(1) rotate(0);
  }
}

.learn__main .apple {
  background-image: url(../images/learn/star.png);
  animation: 0.6s ease-in-out 0s 1 forwards apple-appear, 1.7s ease-in-out 0.7s infinite none soft-grow, 0.7s ease-in-out 0.7s infinite none soft-hue;
}

.learn__main square.has-item.move-dest {
  background: radial-gradient(transparent 0%, transparent 80%, rgba(20, 85, 0, 0.3) 80%);
}

.learn__main .cg-board square.move-dest.drag-over,
.learn__main .cg-board square.move-dest:hover {
  background: rgba(20, 85, 30, 0.3);
}

@keyframes slideIn {
  0% {
    opacity: 0;
    filter: blur(15px);
  }
  100% {
    opacity: 1;
    filter: blur(0px);
  }
}

@keyframes rankGlow {
  50% {
    background-color: rgba(255, 255, 255, 0.5);
    box-shadow: 0 0 40px rgba(255, 255, 255, 0.7);
  }
}

.highlight-2nd-rank .learn__main .cg-board::after,
.highlight-5th-rank .learn__main .cg-board::after,
.highlight-7th-rank .learn__main .cg-board::after {
  width: 100%;
  height: 12.5%;
  content: '';
  position: absolute;
  bottom: 12.5%;
  left: 0;
  box-shadow: 0 0 15px rgba(255, 255, 255, 0.2);
  background-color: rgba(255, 255, 255, 0.2);
  animation: 1s rankGlow ease-in-out infinite;
}

.highlight-7th-rank .learn__main .cg-board::after {
  top: 12.5%;
}

.highlight-5th-rank .learn__main .cg-board::after {
  top: 37.5%;
}

.learn__main #promotion-choice .explanation {
  background: rgba(0, 0, 0, 0.6);
  position: absolute;
  top: 25%;
  left: 25%;
  width: 50%;
  height: 50%;
  padding: 20px;
}

.learn__main #promotion-choice .explanation h2 {
  font-size: 2em;
}

.learn__main #promotion-choice .explanation p {
  font-size: 1.3em;
  margin-top: 15px;
}

.learn__main .cg-board piece.wriggle::after {
  content: '!';
}

.learn__main .cg-board piece.wriggle::after {
  content: '!';
  font-size: 40px;
  font-weight: bold;
  color: #fff;
  text-shadow: rgba(0, 0, 0, 0.8) 0 0 3px;
}

.learn__main .piece-values .cg-board piece::before {
  position: absolute;
  top: 14px;
  right: 4px;
  color: #fff;
  text-shadow: 0 0 9px black, 0 0 4px black;
  font-size: 30px;
  font-weight: bold;
}

.learn__main .piece-values .cg-board piece.queen::before {
  content: '9';
}

.learn__main .piece-values .cg-board piece.rook::before {
  content: '5';
}

.learn__main .piece-values .cg-board piece.bishop::before,
.learn__main .piece-values .cg-board piece.knight::before {
  content: '3';
}

.learn__main .piece-values .cg-board piece.pawn::before {
  content: '1';
}

cg-container > cg-board > svg {
  overflow: hidden;
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 2;
  opacity: 0.6;
}

cg-container > cg-board > svg image {
  opacity: 0.5;
}

.learn__screen-overlay {
  background: rgba(0, 0, 0, 0.65);
  cursor: pointer;
  display: grid;
}

.learn__screen {
  margin: auto;
  background-color: rgba(0, 0, 0, 0.6);
  width: 350px;
  overflow: hidden;
  text-align: center;
  padding-top: 36px;
  max-height: 100%;
  overflow: auto;
}

@media (prefers-reduced-motion: no-preference) {
  .learn__screen > :nth-child(1) {
    animation: slideIn 1s cubic-bezier(0.37, 0.82, 0.2, 1);
  }
  .learn__screen > :nth-child(2) {
    animation: slideIn 1.5s cubic-bezier(0.37, 0.82, 0.2, 1);
  }
  .learn__screen > :nth-child(3) {
    animation: slideIn 2s cubic-bezier(0.37, 0.82, 0.2, 1);
  }
  .learn__screen > :nth-child(4) {
    animation: slideIn 2.5s cubic-bezier(0.37, 0.82, 0.2, 1);
  }
  .learn__screen > :nth-child(5) {
    animation: slideIn 3s cubic-bezier(0.37, 0.82, 0.2, 1);
  }
}

.learn__screen .stars {
  margin-bottom: 20px;
}

@keyframes star-appear {
  0% {
    filter: saturate(1);
    opacity: 0.5;
    transform: scale(0) rotate(-360deg);
  }
  85% {
    filter: saturate(1);
    opacity: 1;
    transform: scale(1.3) rotate(10deg);
  }
  100% {
    filter: saturate(1);
    opacity: 1;
    transform: scale(1) rotate(0);
  }
}

.learn__screen .stars .star-wrap {
  display: inline-block;
  width: 55px;
  height: 55px;
  margin: 0 5px;
  position: relative;
}

.learn__screen .stars .star-wrap::before {
  position: absolute;
  top: 5px;
  left: 5px;
  display: block;
  width: 45px;
  height: 45px;
  content: '';
  background-image: url(../images/learn/star.png);
  background-size: cover;
  filter: saturate(0);
  opacity: 0.2;
}

.learn__screen .stars .star {
  display: inline-block;
  background-image: url(../images/learn/star.png);
  background-size: cover;
  width: 55px;
  height: 55px;
  opacity: 0;
  animation: star-appear 2.5s ease-in-out;
  animation-delay: 0.1s;
  animation-fill-mode: forwards;
}

@media (prefers-reduced-motion: reduce) {
  .learn__screen .stars .star {
    opacity: 1;
    animation: none;
  }
}

.learn__screen .stars .star-wrap:nth-child(2) .star {
  animation-delay: 0.8s;
}

.learn__screen .stars .star-wrap:nth-child(3) .star {
  animation-delay: 1.6s;
}

.learn__screen .no-square {
  width: 100px;
  height: 100px;
  position: relative;
  margin: 0 auto 22px auto;
}

.learn__screen h1 {
  font-weight: bold;
  color: #e3e3e3;
  font-size: 24px;
  margin-bottom: 22px;
}

.learn__screen .round-svg {
  width: 240px;
  height: 240px;
  padding: 0px;
  background: #f57c00;
  border-radius: 50%;
  margin: 0 auto 10px auto;
}

.learn__screen .round-svg img {
  width: 240px;
  height: 240px;
  padding: 20px;
}

.learn__screen .score {
  text-transform: uppercase;
  color: #0288d1;
  font-size: 0.85em;
  display: block;
  letter-spacing: 1px;
  margin-bottom: 17px;
}

.learn__screen .score span {
  font-weight: bold;
  font-family: monospace;
  font-size: 1rem;
}

.learn__screen p {
  padding: 0 15%;
  line-height: 24px;
  margin-bottom: 17px;
}

.learn__screen .buttons {
  width: 100%;
  text-align: center;
  margin-bottom: 23px;
}

.learn__screen .buttons a {
  display: block;
  text-decoration: none;
  text-transform: uppercase;
  line-height: 48px;
  margin: 8px 10% 0 10%;
  height: 48px;
  color: #fff;
  transition: all 0.3s;
}

.learn__screen .buttons a {
  margin-top: 8px;
}

.learn__screen .buttons .next {
  font-size: 0.9em;
  background: #3692e7;
}

.learn__screen .buttons .back {
  font-size: 0.85em;
  background: #e53935f0;
}

.learn__screen .buttons a:hover {
  filter: brightness(0.9);
}

.learn__screen piece {
  width: 100%;
  height: 100%;
}

.learn__side-map {
  user-select: none;
}

.learn__side-map .back,
.learn__side-map .categ > h2 {
  display: block;
  font-size: 1.3em;
  height: 50px;
  line-height: 50px;
  text-indent: 15px;
  cursor: pointer;
  opacity: 0.81;
}

.learn__side-map .back {
  display: flex;
  color: #cccccc;
}

.learn__side-map .back img {
  width: 50px;
  height: 50px;
  opacity: 0.9;
  margin-right: 10px;
  padding: 10px;
  background: #787878;
  display: block;
}

.learn__side-map .back:hover {
  background: rgba(120, 120, 120, 0.2);
}

.learn__side-map .categ > h2 {
  border-top: 1px solid #404040;
}

.learn__side-map .categ > h2:hover {
  background: rgba(54, 146, 231, 0.2);
}

.learn__side-map .categ.active {
  border: 1px solid #404040;
  border-width: 0 1px;
}

.learn__side-map .categ.active:last-child {
  border-bottom-width: 1px;
}

.learn__side-map .categ.active > h2 {
  cursor: default;
  background: #3692e7;
  color: #fff;
}

.learn__side-map .categ:not(.active) .categ_stages {
  display: none;
}

.learn__side-map .stage {
  transition: all 150ms;
  font-size: 1.1em;
  opacity: 0.9;
  color: #cccccc;
}

.learn__side-map .stage img,
.learn__side-map .stage i {
  width: 50px;
  height: 50px;
  opacity: 0.9;
  margin-right: 10px;
  padding: 10px;
}

.learn__side-map .stage i::before {
  font-size: 30px;
}

.learn__side-map .stage.active {
  background: rgba(54, 146, 231, 0.2);
}

.learn__side-map .stage.active img {
  background: #3692e7;
}

.learn__side-map .stage.done:hover {
  background: rgba(98, 153, 36, 0.2);
}

.learn__side-map .stage.done img {
  background: #629924;
}

.learn__side-map .stage.future:hover {
  background: rgba(54, 146, 231, 0.2);
}

.learn__side-map .stage.future img {
  opacity: 0.7;
  background: #3692e7;
}

.learn__side-map .stage:hover {
  filter: brightness(0.9);
  color: #f7f7f7;
}

.learn__side-home {
  background: #3692e7;
  color: #fff;
  text-align: center;
  padding: 1em 0;
}

.learn__side-home h1 {
  font-size: 2.5em;
  margin: 0;
}

.learn__side-home h2 {
  font-size: 1.8em;
  margin: 0.4em 0 1em 0;
}

@keyframes fat-glide {
  50% {
    transform: translateY(-4px);
  }
}

.learn__side-home i.fat {
  display: block;
  width: 200px;
  height: 200px;
  background: url("../images/learn/brutal-helm.svg");
  margin: auto;
  opacity: 0.8;
}

.learn__side-home:hover i.fat {
  animation: 1.2s fat-glide ease-in-out infinite;
}

.learn__side-home .progress {
  position: relative;
  width: 100%;
  height: 30px;
  /* border-top: 3px solid #1566b2; */
  background: #1a7edb;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

@keyframes animatedBackground {
  from {
    background-position: 0 0;
  }
  to {
    background-position: 0 1000%;
  }
}

@keyframes animatedBar {
  from {
    transform: translateX(-100px);
  }
  to {
    transform: translateX(0px);
  }
}

.learn__side-home .progress .bar {
  height: 100%;
  background: #1566b2;
  border-radius: 0 5px 5px 0;
  background-image: url("../images/grain.png");
  transform: translateX(-100px);
  animation: animatedBackground 50s linear infinite, animatedBar 1s forwards;
}

.learn__side-home .progress .text {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  line-height: 30px;
  z-index: 3;
}

.learn__side-home .actions {
  padding: 20px 10px;
  text-align: left;
}

.learn__side-home a {
  opacity: 0.6;
  color: #fff;
}

.learn__side-home a:hover {
  opacity: 1;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
