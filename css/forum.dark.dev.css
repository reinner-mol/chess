@charset "UTF-8";
/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout across pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
.slist thead {
  font-family: 'Roboto', Sans-Serif;
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.slist thead, .cmn-toggle + label::after {
  background: linear-gradient(to bottom, #3c3934, #33312e 100%);
}

.cmn-toggle:hover:not(:disabled) + label::after {
  background: linear-gradient(to bottom, #44413b, #3b3935 100%);
  color: #cccccc;
}

#modal-wrap, .textcomplete-dropdown {
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
}

.reactions button {
  background: none;
  border: none;
  outline: none;
  color: #bababa;
}

.cmn-toggle:focus:not(:disabled) + label, .cmn-toggle:hover:not(:disabled) + label {
  box-shadow: 0 0 12px #999999;
}

.forum-post__message {
  overflow: hidden;
}

.forum.forum-categ .bar {
  padding: 0 var(--box-padding);
}

.search__results, .forum-post__message {
  overflow-wrap: break-word;
  word-break: break-word;
}

.forum h1,
.forum .slist .subject {
  overflow-wrap: break-word;
  word-break: break-all;
  /* support: firefox */
  word-break: break-word;
}

.forum-post__metas .anchor {
  overflow-wrap: normal;
  word-break: normal;
}

.forum-post__message .embed:not(img) {
  position: relative;
  display: block;
  height: 0;
  padding-bottom: 56.25%;
  /* 16/9 */
  width: 100%;
}

.forum-post__message .embed:not(img) > * {
  border: none;
}

.cmn-toggle + label::before, .flash__content::before, .flash-warning .flash__content::before, .flash-failure .flash__content::before {
  font-size: 1.2em;
  vertical-align: middle;
  font-family: 'lichess';
  font-style: normal;
  font-weight: normal;
  text-transform: none;
  speak: none;
  content: attr(data-icon);
  opacity: 0.9;
}

#modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.6);
  z-index: 109;
}

.forum-post__message .embed:not(img) > * {
  position: absolute;
  width: 100%;
  height: 100%;
}

.cmn-toggle {
  touch-action: manipulation;
}

.form3 .captcha, .forum-topic__actions div {
  display: flex;
  flex-flow: row wrap;
}

#modal-overlay, .forum-post__metas > div, .reactions, .reactions button {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.form-split, .form-actions, .forum-topic__actions, .forum-post__metas, .forum .bar {
  /* extends %flex-center */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-between;
}

#modal-wrap, .form-check {
  display: flex;
  flex-flow: column;
}

.pagination a,
.pagination span, #modal-wrap, .flash__content, .form3 .captcha.is-invalid:not(.success), .forum-topic.topic-form .warning {
  border-radius: 3px;
}

.reactions button.mine:first-child {
  border-radius: 3px 0 0 3px;
}

.reactions button.mine:last-child {
  border-radius: 0 3px 3px 0;
}

#modal-wrap .close:hover {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

.slist {
  width: 100%;
  border-bottom: 1px solid #404040;
}

.slist thead th {
  border-top: 1px solid #404040;
  border-bottom: 1px solid #404040;
  padding: 0.5rem 0.8rem;
}

.slist thead th.large {
  font-size: 1.2rem;
}

.slist td {
  padding: 1rem;
}

.slist td .label {
  font-family: monospace;
  font-size: 0.8rem;
}

.slist tbody tr:nth-child(even) {
  background: #302e2c;
}

.slist td:first-child,
.slist th:first-child {
  padding-left: 1.5rem;
}

.slist-pad td:first-child,
.slist-pad th:first-child {
  padding-left: var(--box-padding);
}

.slist-pad td:last-child,
.slist-pad th:last-child {
  padding-right: var(--box-padding);
}

.slist-invert tbody tr:nth-child(odd) {
  background: #302e2c;
}

.slist-invert tbody tr:nth-child(even) {
  background: none;
}

.pagination {
  color: #6b6b6b;
  display: flex;
}

.pagination a,
.pagination span {
  width: 2rem;
  height: 2rem;
  margin: 0 0.1rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.pagination span {
  color: #6b6b6b;
}

.pagination a:hover {
  background: #282f35;
}

.pagination .current {
  background: #3692e7;
  color: #fff;
}

#modal-overlay {
  justify-content: center;
}

#modal-wrap {
  background: #262421;
  position: relative;
  padding: 2rem;
  text-align: center;
  max-width: 100vw;
  max-height: 96vh;
}

#modal-wrap > div {
  overflow: hidden;
  overflow-y: auto;
}

#modal-wrap .close {
  color: #bababa;
  position: absolute;
  font-size: 16px;
  line-height: 27px;
  width: 32px;
  height: 32px;
  cursor: pointer;
  top: 0;
  right: 0;
  background: none;
}

@media (min-width: 800px) {
  #modal-wrap .close {
    top: -12px;
    right: -12px;
    background: #3c3934;
    border-radius: 50%;
  }
}

#modal-wrap .close:hover {
  background: #cc3333;
  color: #fff;
}

.cmn-toggle {
  position: absolute;
  margin-left: -99999px;
}

.cmn-toggle + label {
  display: block;
  position: relative;
  cursor: pointer;
  outline: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  padding: 1px;
  width: 40px;
  height: 24px;
  border: 1px solid #404040;
  border-radius: 24px;
}

.cmn-toggle + label::before, .cmn-toggle + label::after {
  display: block;
  position: absolute;
  content: '';
  width: 22px;
  height: 22px;
  bottom: 0.1px;
  left: 0;
}

.cmn-toggle + label::before {
  font-size: 1em;
  z-index: 1;
  text-align: center;
  line-height: 22px;
}

.cmn-toggle + label::after {
  border-radius: 100%;
  box-shadow: 0 1px 2.5px rgba(0, 0, 0, 0.3);
}

.cmn-toggle:not(:checked) + label {
  background-color: #cc3333;
}

.cmn-toggle--subtle:not(:checked) + label {
  background-color: #6b6b6b;
}

.cmn-toggle:checked + label {
  background-color: #629924;
}

.cmn-toggle:disabled + label {
  opacity: 60%;
  cursor: not-allowed !important;
}

.cmn-toggle:hover:not(:disabled) + label {
  transition: background 150ms;
}

.cmn-toggle:hover:not(:disabled) + label::before {
  transition: margin 150ms, color 150ms;
}

.cmn-toggle:hover:not(:disabled) + label::after {
  transition: margin 150ms;
}

.cmn-toggle:not(:checked) + label::before {
  content: 'L';
  color: #cc3333;
}

.cmn-toggle--subtle:not(:checked) + label::before {
  color: #6b6b6b;
}

.cmn-toggle:checked + label::before, .cmn-toggle:checked + label::after {
  margin-left: 16px;
}

.cmn-toggle:checked + label::before {
  content: 'E';
  color: #629924;
}

.flash {
  margin: 1em 0 2em 0;
}

.flash__content {
  padding: 1em 2em;
  background: #629924;
  color: #fff;
}

.flash__content::before {
  content: 'E';
  margin-right: 1em;
  font-size: 1.5em;
}

.flash__content a {
  color: #fff;
}

.flash-warning .flash__content {
  background: #bf811d;
  color: #fff;
}

.flash-warning .flash__content::before {
  content: 'î€…';
}

.flash-failure .flash__content {
  background: #cc3333;
  color: #fff;
}

.flash-failure .flash__content::before {
  content: 'j';
}

.form-group {
  margin-bottom: 3rem;
}

.form-split {
  align-items: inherit;
}

.form-half {
  flex: 1 1 48%;
  min-width: 200px;
}

.form-third {
  flex: 1 1 31%;
}

@media (min-width: 500px) {
  .form-half,
  .form-third {
    flex-grow: 0;
  }
}

.form-label {
  font-weight: bold;
  display: inline-block;
  margin-bottom: 0.5rem;
  cursor: text;
}

.form-control {
  display: block;
  width: 100%;
  height: calc(2.7em + 2px);
  background-clip: padding-box;
}

textarea.form-control {
  height: auto;
}

.form-control:invalid,
.form-group.is-invalid .form-control {
  border-color: #cc3333;
}

.form3 .error,
.form-help,
.password-complexity-label {
  font-size: 90%;
  margin-top: 0.25rem;
}

.form3 .error {
  color: #cc3333;
}

.form-help,
.password-complexity-label {
  color: #999999;
}

.form-check {
  justify-content: center;
}

.form-check div {
  display: flex;
}

.form-check-input {
  margin-right: 0.5rem;
}

.form-check .form-label {
  margin-bottom: 0;
  cursor: pointer;
}

.form-actions {
  margin: 1.5rem 0;
  padding-top: 1.5rem;
  border-top: 1px solid #404040;
}

.form-actions.single {
  justify-content: flex-end;
}

.form3 hr {
  margin-top: 1rem;
  margin-bottom: 1rem;
  border: 0;
  border-top: 1px solid #404040;
}

.password-complexity {
  margin-top: -2rem;
  margin-bottom: 3rem;
}

.password-complexity-meter {
  display: flex;
  grid-gap: 0.25rem;
  height: 0.4rem;
  margin-top: 1rem;
}

.password-complexity-meter > * {
  background-color: gray;
  width: 25%;
}

.cmn-toggle {
  position: absolute;
  margin-left: -99999px;
}

.cmn-toggle + label {
  display: block;
  position: relative;
  cursor: pointer;
  outline: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  padding: 1px;
  width: 40px;
  height: 24px;
  border: 1px solid #404040;
  border-radius: 24px;
}

.cmn-toggle + label::before, .cmn-toggle + label::after {
  display: block;
  position: absolute;
  content: '';
  width: 22px;
  height: 22px;
  bottom: 0.1px;
  left: 0;
}

.cmn-toggle + label::before {
  font-size: 1em;
  z-index: 1;
  text-align: center;
  line-height: 22px;
}

.cmn-toggle + label::after {
  border-radius: 100%;
  box-shadow: 0 1px 2.5px rgba(0, 0, 0, 0.3);
}

.cmn-toggle:not(:checked) + label {
  background-color: #cc3333;
}

.cmn-toggle--subtle:not(:checked) + label {
  background-color: #6b6b6b;
}

.cmn-toggle:checked + label {
  background-color: #629924;
}

.cmn-toggle:disabled + label {
  opacity: 60%;
  cursor: not-allowed !important;
}

.cmn-toggle:hover:not(:disabled) + label {
  transition: background 150ms;
}

.cmn-toggle:hover:not(:disabled) + label::before {
  transition: margin 150ms, color 150ms;
}

.cmn-toggle:hover:not(:disabled) + label::after {
  transition: margin 150ms;
}

.cmn-toggle:not(:checked) + label::before {
  content: 'L';
  color: #cc3333;
}

.cmn-toggle--subtle:not(:checked) + label::before {
  color: #6b6b6b;
}

.cmn-toggle:checked + label::before, .cmn-toggle:checked + label::after {
  margin-left: 16px;
}

.cmn-toggle:checked + label::before {
  content: 'E';
  color: #629924;
}

.form3 .captcha {
  margin: 1em 0 0 -1em;
}

@media (min-width: 500px) {
  .form3 .captcha {
    flex-wrap: nowrap;
  }
}

.form3 .captcha.is-invalid:not(.success) {
  border: 1px solid #cc3333;
  background: #372623;
}

.form3 .captcha .challenge {
  flex: 0 0 250px;
  margin: 0 0 1em 1em;
}

.form3 .captcha .captcha-explanation {
  flex: 1 1 auto;
  overflow: hidden;
  margin: 0 0 1em 1em;
}

.form3 .captcha.is-invalid .captcha-explanation {
  padding: 1em;
}

.form3 .captcha .captcha-explanation .result {
  display: none;
  margin-top: 1rem;
  font-weight: bold;
}

.form3 .captcha .success {
  color: #629924;
}

.form3 .captcha .failure {
  color: #cc3333;
}

.form3 .captcha.success .success,
.form3 .captcha.failure .failure {
  display: block;
}

.search__results {
  margin-top: 1em;
}

.search__results .post {
  display: block;
  font-size: 1.2em;
}

.search__results p {
  margin: 0;
}

.search__results .info {
  white-space: nowrap;
}

.forum-topic.topic-form .warning {
  border-radius: 20px;
  padding: 1rem;
  background: #3f2624;
  border: 1px solid #cc3333;
  text-align: center;
  font-size: 1.3em;
  margin-bottom: 2rem;
}

.forum-topic.topic-form .warning h2 {
  font-weight: bold;
  color: #cc3333;
}

.forum-topic.topic-form .warning h2,
.forum-topic.topic-form .warning p {
  margin: 1.5rem;
}

.forum-topic__posts {
  margin-top: 2rem;
}

.forum-topic__actions {
  margin-bottom: 3rem;
}

.forum-topic__actions div .button {
  margin-left: 1rem;
}

.forum-topic__actions div .unsub.on .off,
.forum-topic__actions div .unsub.off .on {
  display: none;
}

.forum-topic .reply label[for='form3-text'] {
  display: none;
}

.forum-post {
  font-size: 1.1em;
  border-top: 1px solid #404040;
  padding: 2rem 0 0.5rem 0;
}

.forum-post__metas {
  margin-bottom: 1.5rem;
}

.forum-post__metas .author {
  color: #999999;
  font-weight: bold;
  font-size: 1.1em;
  margin-right: 1rem;
}

.forum-post__metas .anchor {
  color: #2e7cc5;
  font-weight: bold;
}

.forum-post__metas .delete {
  color: #bababa;
  margin-left: 1em;
}

.forum-post__metas .delete:hover {
  color: #cc3333;
}

.forum-post .mod {
  font-size: 0.9em;
  color: #bababa;
}

@media (hover: hover) {
  .forum-post .mod {
    visibility: hidden;
  }
}

.forum-post .mod:hover {
  color: #cc3333;
}

.forum-post .mod.postip {
  margin-left: 1rem;
  max-width: 50vw;
  overflow: hidden;
  display: none;
}

@media (min-width: 800px) {
  .forum-post .mod.postip {
    display: block;
  }
}

.forum-post:hover .mod {
  visibility: visible;
}

.forum-post:last-child {
  border-bottom: 1px solid #404040;
  margin-bottom: 3rem;
}

.forum-post.erased {
  color: #6b6b6b;
}

.forum-post.erased .forum-post__message {
  font-style: italic;
  text-align: center;
  margin-bottom: 2em;
}

.forum-post.erased .forum-post__metas {
  justify-content: flex-end;
}

.forum-post__message {
  margin-bottom: 0.5em;
}

.forum-post__message .embed:not(img) {
  margin: 2vmin auto;
}

.forum-post__message img {
  max-width: 100%;
}

.forum-post .edit-buttons {
  text-align: right;
  margin-top: 0.5em;
}

.forum-post .edit-buttons a {
  margin-right: 1em;
}

.forum-post .edit-post-form {
  display: none;
  margin-top: 1.5em;
}

.forum-post .edit-post-form textarea {
  width: 100%;
  height: 20em;
}

.forum .textcomplete-dropdown {
  border: 1px solid #ccc;
  box-shadow: 0 0.5px 5px rgba(0, 0, 0, 0.25), 0 0.5px 8px rgba(0, 0, 0, 0.15);
  background: #fff;
}

.forum .textcomplete-dropdown li {
  list-style: none;
  border-top: 1px solid #dfdfdf;
  padding: 0.5em;
  min-width: 100px;
  font-size: 1.2em;
  font-weight: bold;
  cursor: pointer;
}

.forum .textcomplete-dropdown li.textcomplete-header,
.forum .textcomplete-dropdown li.textcomplete-footer {
  display: none;
}

.forum .textcomplete-dropdown li:hover,
.forum .textcomplete-dropdown .active {
  background-color: #f0f0f0;
}

.forum .slist td {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}

.forum .slist td.right,
.forum .slist th.right {
  display: none;
}

@media (min-width: 800px) {
  .forum .slist td.right,
  .forum .slist th.right {
    display: table-cell;
    text-align: right;
    padding-right: 2em;
  }
}

.forum .slist td:last-child {
  white-space: nowrap;
  padding-right: 1em;
  display: none;
}

.forum .slist td:last-child time {
  color: #3692e7;
  font-size: 1em;
}

@media (min-width: 500px) {
  .forum .slist td:last-child {
    display: table-cell;
  }
}

.forum .slist thead {
  display: none;
}

@media (min-width: 500px) {
  .forum .slist thead {
    display: table-header-group;
  }
}

.forum .slist.topics {
  margin-bottom: 2rem;
}

.forum .slist.topics .subject {
  font-size: 1.2em;
}

.forum .slist.categs .subject p {
  margin-top: 0.3em;
}

.textcomplete-dropdown {
  background: #3c3934;
}

.textcomplete-dropdown li {
  list-style: none;
  border-top: 1px solid #404040;
  padding: 0.5em;
  min-width: 100px;
  font-weight: bold;
  cursor: pointer;
}

.textcomplete-dropdown li.textcomplete-header,
.textcomplete-dropdown li.textcomplete-footer {
  display: none;
}

.textcomplete-dropdown li:hover,
.textcomplete-dropdown .active {
  background-color: #4b3b2f;
}

.textcomplete-dropdown a {
  color: #bababa;
}

.reactions {
  font-size: 1.1em;
}

.reactions.loading {
  opacity: 0.3;
}

.reactions button {
  transition: all 150ms;
  padding: 0.3em 0.6em;
  order: 1;
  color: #3692e7;
  height: 2.5em;
}

.reactions button.mine {
  background: #282f35;
}

.reactions button.no {
  opacity: 0;
}

.forum-post:hover .reactions-auth button.no {
  opacity: 0.4;
  filter: grayscale(100%);
}

.forum-post:hover .reactions-auth button.no:hover {
  opacity: 0.7;
  filter: grayscale(0%);
  background: #29353f;
}

.forum-post:hover .reactions-auth button.no:hover img {
  transform: scale(1.2) !important;
}

.reactions button.yes {
  order: 0;
  opacity: 1;
}

.reactions img {
  width: 20px;
  height: 20px;
  transition: transform 0.15s cubic-bezier(0.2, 0, 0.13, 2);
  pointer-events: none;
  margin-right: 0.4em;
}

.forum.forum-categ {
  padding-bottom: 1rem;
}

.forum.forum-categ .sticky {
  background: #2d3222;
}

.forum.forum-categ .sticky:nth-child(even) {
  background: #363b2b;
}

.forum .create-topic {
  margin: 20px;
}

.forum .bar {
  margin-bottom: 1em;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
