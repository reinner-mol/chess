/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout across pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
#dasher_app .status .ping,
#dasher_app .status .server {
  font-family: 'Roboto', Sans-Serif;
}

/* text printed directly on the page background deserves special treatment (transp theme) */
#dasher_app .links a,
#dasher_app .links button,
#dasher_app .subs .sub {
  white-space: nowrap;
  overflow: hidden;
}

#dasher_app .theme .list, #dasher_app .piece .list {
  display: flex;
  flex-flow: row wrap;
}

#dasher_app .theme .list a {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

#dasher_app {
  border-radius: 3px 0 0 3px;
}

input.range {
  -webkit-appearance: none;
  background: none;
  border: 0;
}

input.range:focus {
  outline: none;
}

input.range::-webkit-slider-runnable-track {
  width: 100%;
  height: 1em;
  cursor: pointer;
  background: #4d4d4d;
  border-radius: 0.5em;
}

input.range::-webkit-slider-thumb {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
  border: 1px solid #7a7a7a;
  height: 1em;
  width: 1.5em;
  border-radius: 12px;
  background: rgba(0, 0, 0, 0.6);
  cursor: pointer;
  -webkit-appearance: none;
  margin-top: -0.3px;
}

input.range::-moz-range-track {
  width: 100%;
  height: 1em;
  cursor: pointer;
  background: #4d4d4d;
  border-radius: 0.5em;
}

input.range::-moz-range-thumb {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
  border: 1px solid #7a7a7a;
  height: 1em;
  width: 1.5em;
  border-radius: 12px;
  background: rgba(0, 0, 0, 0.6);
  cursor: pointer;
}

input.range::-ms-track {
  width: 100%;
  height: 1em;
  cursor: pointer;
  background: #4d4d4d;
  border-radius: 0.5em;
}

input.range::-ms-fill-lower {
  background: rgba(191, 191, 191, 0.78);
  border-radius: 11.8px;
}

input.range::-ms-fill-upper {
  background: rgba(214, 214, 214, 0.78);
  border-radius: 11.8px;
}

input.range::-ms-thumb {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
  border: 1px solid #7a7a7a;
  height: 1em;
  width: 1.5em;
  border-radius: 12px;
  background: rgba(0, 0, 0, 0.6);
  cursor: pointer;
  border-color: transparent;
  color: transparent;
}

#dasher_app .links,
#dasher_app .subs {
  padding: 5px 0;
}

#dasher_app .links a,
#dasher_app .links button,
#dasher_app .subs .sub {
  display: block;
  padding: 0.5rem 1rem;
}

#dasher_app .links a::before,
#dasher_app .links button::before {
  position: relative;
  bottom: 0.05em;
}

#dasher_app .links a:hover,
#dasher_app .links a:hover::before,
#dasher_app .links button:hover,
#dasher_app .subs .sub:hover {
  background: #629924;
  color: #fff;
  opacity: 1;
}

#dasher_app .logout button:hover {
  background: #cc3333;
}

#dasher_app .links button {
  width: 100%;
  text-align: left;
  border: 0;
  background: none;
}

#dasher_app .subs {
  border-top: 1px solid #404040;
}

#dasher_app .sub::before {
  float: right;
  font-size: 80%;
  margin-top: 0.25rem;
  color: #629924;
}

#dasher_app .sub:hover::before {
  color: #fff;
  opacity: 0.9;
}

#dasher_app .theme .list {
  margin: 5px 0;
}

#dasher_app .theme .list a {
  flex: 0 0 50%;
  height: 44px;
  justify-content: center;
}

#dasher_app .theme .list span {
  display: block;
  width: 64px;
  height: 32px;
}

#dasher_app .theme.d3 .list span {
  width: 66px;
  height: 30px;
  transition: transform 150ms;
}

#dasher_app .theme .list a:hover {
  filter: brightness(1.05);
}

#dasher_app .theme .list a:hover span {
  transform: scale(1.05);
}

#dasher_app .theme .list a.active {
  background-color: #4d4d4d;
}

#dasher_app .theme.d2 .blue {
  background-image: url(../images/board/svg/blue.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .blue2 {
  background-image: url(../images/board/blue2.thumbnail.jpg);
}

#dasher_app .theme.d2 .blue-marble {
  background-image: url(../images/board/blue-marble.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood2 {
  background-image: url(../images/board/wood2.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood3 {
  background-image: url(../images/board/wood3.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood4 {
  background-image: url(../images/board/wood4.thumbnail.jpg);
}

#dasher_app .theme.d2 .blue3 {
  background-image: url(../images/board/blue3.thumbnail.jpg);
}

#dasher_app .theme.d2 .marble {
  background-image: url(../images/board/marble.thumbnail.jpg);
}

#dasher_app .theme.d2 .brown {
  background-image: url(../images/board/svg/brown.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .green {
  background-image: url(../images/board/svg/green.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .olive {
  background-image: url(../images/board/olive.thumbnail.jpg);
}

#dasher_app .theme.d2 .purple {
  background-image: url(../images/board/svg/purple.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .grey {
  background-image: url(../images/board/grey.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood {
  background-image: url(../images/board/wood.thumbnail.jpg);
}

#dasher_app .theme.d2 .canvas {
  background-image: url(../images/board/canvas2.thumbnail.jpg);
}

#dasher_app .theme.d2 .leather {
  background-image: url(../images/board/leather.thumbnail.jpg);
}

#dasher_app .theme.d2 .metal {
  background-image: url(../images/board/metal.thumbnail.jpg);
}

#dasher_app .theme.d2 .maple {
  background-image: url(../images/board/maple.thumbnail.jpg);
}

#dasher_app .theme.d2 .maple2 {
  background-image: url(../images/board/maple2.thumbnail.jpg);
}

#dasher_app .theme.d2 .newspaper {
  background-image: url(../images/board/newspaper.thumbnail.png);
}

#dasher_app .theme.d2 .green-plastic {
  background-image: url(../images/board/green-plastic.thumbnail.png);
}

#dasher_app .theme.d2 .purple-diag {
  background-image: url(../images/board/purple-diag.thumbnail.png);
}

#dasher_app .theme.d2 .pink {
  background-image: url(../images/board/pink-pyramid.thumbnail.png);
}

#dasher_app .theme.d2 .ic {
  background-image: url(../images/board/svg/ic.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .horsey {
  background-image: url(../images/board/horsey.thumbnail.jpg);
}

#dasher_app .theme.d3 .Black-White-Aluminium {
  background-image: url("../images/staunton/board/Black-White-Aluminium.thumbnail.png");
}

#dasher_app .theme.d3 .Brushed-Aluminium {
  background-image: url("../images/staunton/board/Brushed-Aluminium.thumbnail.png");
}

#dasher_app .theme.d3 .China-Blue {
  background-image: url("../images/staunton/board/China-Blue.thumbnail.png");
}

#dasher_app .theme.d3 .China-Green {
  background-image: url("../images/staunton/board/China-Green.thumbnail.png");
}

#dasher_app .theme.d3 .China-Grey {
  background-image: url("../images/staunton/board/China-Grey.thumbnail.png");
}

#dasher_app .theme.d3 .China-Scarlet {
  background-image: url("../images/staunton/board/China-Scarlet.thumbnail.png");
}

#dasher_app .theme.d3 .China-Yellow {
  background-image: url("../images/staunton/board/China-Yellow.thumbnail.png");
}

#dasher_app .theme.d3 .Classic-Blue {
  background-image: url("../images/staunton/board/Classic-Blue.thumbnail.png");
}

#dasher_app .theme.d3 .Gold-Silver {
  background-image: url("../images/staunton/board/Gold-Silver.thumbnail.png");
}

#dasher_app .theme.d3 .Green-Glass {
  background-image: url("../images/staunton/board/Green-Glass.thumbnail.png");
}

#dasher_app .theme.d3 .Light-Wood {
  background-image: url("../images/staunton/board/Light-Wood.thumbnail.png");
}

#dasher_app .theme.d3 .Power-Coated {
  background-image: url("../images/staunton/board/Power-Coated.thumbnail.png");
}

#dasher_app .theme.d3 .Purple-Black {
  background-image: url("../images/staunton/board/Purple-Black.thumbnail.png");
}

#dasher_app .theme.d3 .Rosewood {
  background-image: url("../images/staunton/board/Rosewood.thumbnail.png");
}

#dasher_app .theme.d3 .Wood-Glass {
  background-image: url("../images/staunton/board/Wood-Glass.thumbnail.png");
}

#dasher_app .theme.d3 .Wax {
  background-image: url("../images/staunton/board/Wax.thumbnail.png");
}

#dasher_app .theme.d3 .Jade {
  background-image: url("../images/staunton/board/Jade.thumbnail.png");
}

#dasher_app .theme.d3 .Marble {
  background-image: url("../images/staunton/board/Marble.thumbnail.png");
}

#dasher_app .theme.d3 .Woodi {
  background-image: url("../images/staunton/board/Woodi.thumbnail.png");
}

#dasher_app .piece piece {
  position: absolute;
  width: 12.5%;
  height: 12.5%;
  top: 0;
  left: 0;
  background-size: cover;
  z-index: 2;
  /* no less than 2 */
  pointer-events: none;
}

#dasher_app .piece .list {
  background: url(../images/darksquares.jpg);
  box-shadow: inset 0 7px 20px 3px #777;
}

#dasher_app .piece .no-square {
  width: 75px;
  height: 75px;
  position: relative;
}

#dasher_app .piece .no-square:hover {
  background: rgba(250, 250, 250, 0.15);
}

#dasher_app .piece .no-square.active {
  background: rgba(98, 153, 36, 0.7);
}

#dasher_app .piece piece {
  width: 100%;
  height: 100%;
}

#dasher_app .piece.d3 piece {
  left: 0;
  top: 0;
  background-size: cover;
  background-position: 0 67%;
}

#dasher_app {
  width: 225px;
}

#dasher_app .spinner {
  margin: 20px auto;
}

#dasher_app .status {
  display: block;
  position: relative;
  padding: 0.8rem;
  border-top: 1px solid #404040;
}

#dasher_app .status signal {
  position: absolute;
  right: 1rem;
  top: 1rem;
  font-size: 1.7rem;
}

#dasher_app .status .ping,
#dasher_app .status .server {
  display: block;
}

#dasher_app .status strong {
  padding: 0 5px;
}

#dasher_app .head {
  display: block;
  padding: 1rem;
  border-bottom: 1px solid #404040;
}

#dasher_app .head::before {
  color: #629924;
  opacity: 0.8;
}

#dasher_app .head:hover::before {
  opacity: 1;
}

#dasher_app .langs form {
  max-height: 400px;
  overflow: auto;
}

#dasher_app .langs button {
  display: block;
  padding: 0.7rem 0.7rem 0.7rem 1rem;
  border: none;
  background: none;
  width: 100%;
  text-align: left;
}

#dasher_app .langs button:hover {
  background: rgba(22, 35, 8, 0.7875);
}

#dasher_app .langs .accepted {
  border-left: 4px solid #629924;
}

#dasher_app .langs .current {
  background: #629924 !important;
  color: #fff !important;
  border-left: none;
}

#dasher_app .langs .help {
  color: #3692e7;
  display: block;
  padding: 0.7rem 0.7rem 0.7rem 1rem;
}

#dasher_app .langs .help:hover {
  background: #3692e7;
  color: #fff;
}

#dasher_app .selector {
  flex: 1 1 100%;
  margin: 0.5rem 0;
}

#dasher_app .selector a {
  display: block;
  padding: 0.7rem 1rem;
  transition: background 150ms;
}

#dasher_app .selector a:hover {
  background: rgba(22, 35, 8, 0.7875);
}

#dasher_app .selector a.active {
  background: #629924 !important;
  color: #fff !important;
}

#dasher_app .selector a::before {
  margin-right: 8px;
  font-size: 19px;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 150ms;
}

#dasher_app .selector a:hover::before {
  opacity: 1;
  color: #629924;
}

#dasher_app .selector a.active::before {
  opacity: 1;
  color: #fff !important;
}

#dasher_app .selector.large a {
  padding: 1rem 1rem;
}

#dasher_app .zen a::before {
  opacity: 0.5;
}

#dasher_app .zen:hover a::before {
  opacity: 1;
}

#dasher_app .sound .content {
  display: flex;
  margin: 5px 0 5px 5px;
}

#dasher_app .sound .selector a {
  border-radius: 3px 0 0 3px;
}

#dasher_app .sound input[type='range'] {
  flex: 0 0 1em;
  width: 1em;
  margin: 1rem;
  writing-mode: bt-lr;
  -webkit-appearance: slider-vertical;
}

#dasher_app .sound.silent input[type='range'] {
  opacity: 0.2;
}

#dasher_app .background .image p {
  font-size: 0.9em;
  padding: 5px;
}

#dasher_app .background input {
  padding: 5px;
  border: 1px solid #444;
  width: 100%;
  background-color: #3e3e3e;
  color: #fff;
}

#dasher_app .board .zoom {
  display: none;
  border-top: 1px solid #404040;
  padding: 1.5rem;
}

@media (min-width: 800px) {
  #dasher_app .board .zoom {
    display: block;
  }
}

#dasher_app .board .range {
  font-size: 1.5em;
  margin: 0;
  padding: 0;
  width: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
